<context: [EventEmitter, HTTP, Router Event, AsyncPipe, FormGroups] >


Observables in Angular
----------------------

- Angular makes use of observables as an interface to handle a variety of common asynchronous operations.
- For example
  - The EventEmitter class extends Observable
  - The HTTP module uses obersvables to handle AJAX requests and responses
  - The Router and Forms modules use observables to listen for and respond to use-input events


Event Emitter
_____________

- Angular provides an EventEmitter class that is used when publishing values from a component through
  @Output() decorator.
- EventEmitter extends Observable, adding an emit() method ( this is coming from Observable interface ), so
  it can send arbitrary values
- When you call emit(), it passes the emitted value to the next() method of any subscribed observer.


<zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>

EventEmitter
------------
@Component({
    selector: 'zippy',
    template: `
       <div class="zippy">
       <div (click)="toggle()">Toggle</div>
       <div [hidden]="!visible">
        <ng-content></ng-content>
       </div>
       </div>`})

export class ZippyComponent {
      visible = true;
      @Output() open = new EventEmitter<any>();
      @Output() close = new EventEmitter<any>();

      
      toggle() {
          this.visible = !this.visible;
          if(this.visible) {
            this.open.emit(null);
         } 
         else {
            this.close.emit(null);
         };
      }
}

HTTP
____

- Angular's HTTPClient returns observables from HTTP method calls.
- For instance, http.get('/api') returns an observable .
- This provides several advantages over promise-based HTTP API's
  - Observables do not mutuate server response( as can occur through chained .then() calss on promises).
    Instead, you can use a series of operators to transform values as needed
  - HTTP requests are cancellable through the unsubscribe() method.
  - Requests can be configured to get progress event updates
  - Failed requests can be retried easily.

Async pipe
__________

- The AsyncPipe subscribes to an observable or promise and returns the latest value it has emitted.
- When a new value is emitted, the pipe marks the component to be checked for changes.

- The following example binds the 'time' observable to the component's view.
- The observable continuously updates the view with the current time


Using async pipe
----------------

@Component({
     selector: 'async-observable-pipe',
     template: `<div><code>observable|async</code>:
             Time: {{ time | async }}</div>`
  });

export class AsyncObservablePipeComponent {
   time = new Observable(observer => {
         setInterval(() => observer.next(new Date().toString()), 1000)
       });
}


Router
______

- Router.events provides events as observables.
- You can use the filter() operator from RxJS to look for events of interest, and subscribe to them
  in order to make decisions based on the sequence of events in the navigation process


import { Router, NavigationStart } from '@angular/router'
import { filter } from 'rxjs/operators';

@Component({
    selector: 'app-routable',
    templateUrl: './routable.component.html',
    styleUrls: ['./routable.component.css']
});


export class Routable1Component implements OnInit {
       navStart: Observable<NavigationStart>;
 
       constructor(private router: Router) {
        //create a new Observable that publishes only the NavigationStart event
       this.navStart = router.events.pipe(
                  filter(evt => evt instanceof NavigationStart)
              ) as Obseravable<NavigationStart>;
      }

     
      ngOnInit() {
         this.navStart.subscribe(evt => console.log('Navigation Started!));
      }
  } 


ActivatedRoute
______________

- The ActivatedRoute is an injected router service that makes use of observables to get information about a route
   path and parameters.
- For Example, ActivateRoute.url contains as observable that reports the route path or paths. Here is an example

import { ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-routable',
  templateUrl: './routable.component.html',
  styleUrls: ['./routable.component.css']
})
export class Routable2Component implements OnInit {
  constructor(private activatedRoute: ActivatedRoute) {}

  ngOnInit() {
    this.activatedRoute.url
      .subscribe(url => console.log('The URL changed to: ' + url));
  }
}



Reactive Forms
______________

- Reactive Forms have properties that use obervables to monitor form control Values
- The FormControl properties 'valueChanges' and 'statusChanges' contain observables that raise change events.
- Subscribing to an observable form-control is a way of triggering application logic within the component class


Reactive Forms
--------------

import { FormGroup } from '@angular/forms';

@Component({
   selector: 'my-component',
  template: 'MyComponent Template'
});


export class MyComponent implement OnInit {
   nameChangeLog: string[] = [];
   heroForm: FormGroup;


   ngOnInit() {
      this.logNameChange();
   }


   logNameChange() {
    cont nameControl = this.heroForm.get('name');
    nameCOntrol.valueChanges.forEach(
        (value: string) => this.nameChangeLog.push(value)
     );
   }

}




