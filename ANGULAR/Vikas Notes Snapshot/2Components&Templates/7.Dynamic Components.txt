Dynamic Component Loader
________________________

<context: [ Dynamic Component Loading, Anchor Directive, Loading Components( <ng-template ad-host>),
            resolving components(FactoryResolver, ViewContainerRef),  The AdComponentInterface ] 

- Component templates are not always fixed. 
- An application may need to load new components at runtime

- This cookbook shows how to use ComponentFactoryResolver to add component dynamically


Dynamic Component Loading
_________________________

- The following example shows how to build a dyanamic add banner
- The hero agency is planning an ad campaign with several different ads cycling through the banner
- New ad components are added frequently by several different teams
- This makes it impractical to use a template with  a static component structure

- Instead you need a way to load a new component without fixed reference to the component in the ad banner's
  template

- Angular comes with its own API for loading component's dynamically

The anchor directive
____________________

- Before you can add components you have to define an anchor point to tell Angular where to insert components

src/app/ad.directive.ts

import { Directive, ViewContainerRef } from '@angular/core';

@Directive({
     selector: '[ad-host]',
   });

export class AdDirective {
     constructor(public viewContainerRef: ViewContainerRef) {}
}

- AdDirective injects ViewContainerRef to gain access to the view container of the element that will host
 the dynamically added component
- In the @Directive decorator , notice the selector name, 'ad-host' thats what you use to apply the directive
  to the element.


Loading Components
__________________

- Most of the ad banner implementation is in ad-banner.component.ts. 
- The <ng-template> element is where you apply the directive 'ad-host'
- Now angular knows where to dynamically load components


src/app/ad-banner.component.ts

template: `
           <div class="ad-banner-example">
           	<h3>Advertisements</h3>
           	<ng-template ad-host></ng-template>
           </div>

- The <ng-template> is a good choice for dynamic components because it doesnt render any additional
  output


Resolving Components
____________________

- AdBanner component takes an array of AdItem objects as input, which ultimately comes from AdService.
- AdItem objects specify the type of compoennt to load and any data to bind to the component.
- AdService returns the actual ads making up the add campaign

- passing an array of component to AdBanner component allows for dynamic list of ads without static elements in
  the template

- with its getAds() method, AdBannerComponent cycles through the array of AdItems and loads new component every
  3 seconds by calling load component

src/app/ad-banner.component.ts

import { Component, Input, OnInit, ViewChild, ComponentFactoryResolver, OnDestroy } from '@angular/core';

import { AdDirective } from './ad.directive';
import { AdItem }      from './ad-item';
import { AdComponent } from './ad.component';
export class AddBannerComponent implement OnInit, OnDestroy {
   @Input()
   ads: AdItem[];

   currentAdIndex = -1;
   @ViewChild(AdDirective) adHost: AdDirective;
   interval: any;

  
   constructor( private componentFactoryResolver: ComponentFactoryResolver ) {}

   ngOnInit() {
     this.loadComponents();
     this.getAds();
   }

   ngOnDestroy() {
     clearInterval( this.interval );
  }

   loadComponent() {
      this.currentAdIndex = (this.currentAdIndex + 1) % this.ads.length;
      let adItem = this.ads[this.currentAdIndex];


      let componentFactory =  this.componentFactoryResolver.resolveComponentFactory(adItem.component);
      
      let viewContainerRef = this.adHost.viewContainerRef;
      viewContainerRef.clear();

     let componentRef = viewContainerRef.createComponent(componentFacotry);
     (<AdComponent>componentRef.instance).data = adItem.data;


     getAds() {
       this.interval = setInterval( ()=> {
          this.loadComponent();
       }, 3000 );
}
}


- After loadComponent() selects an ad, it uses componentFactoryResolver to resolve a ComponentFactory for
  each specific component. 
- The componentFactory then creates an instance of each component.

- Next you are targeting the viewContainerRef that exists in this specifix instance of the component.
- how do you know its this specific instance ? Because its referring to adHost and adHost is the dirctive 
  set up to tell Angular where to insert dynamic component

- Recall AdDirective injects ViewContainerRef to its constructor. This is how the directive accesses the element
  that you want to use to host the dynamic component

- To add component to the template, you call createComponent() on ViewContainerRef
- The createComponent() method returns a reference to the loaded component.
- Use that reference to interact with the component by assigning to its properties or calling its method

Selector references  <entry components : >
___________________

- Generally, the Angular compiler generates a ComponentFactory for any component referenced in a template.
- However there are no selector references in the templates for dynamically loaded components since they load
  run time
- To ensure the compiler still generates a factory , add dynamically loaded components to the
  NgModule's entryComponents array

entryComponents: [ HeroJobAdComponent, HeroProfileComponent ],


The AdComponentInterface
________________________

- In the ad banner, all components implement a common AdComponent interface to standardize the API for 
passing data to the components.
-Here are two sample components and the AdComponent interface for reference:

export interface AdComponent {
  data: any;
}

ad.service.ts
--------------------
import { Injectable }           from '@angular/core';

import { HeroJobAdComponent }   from './hero-job-ad.component';
import { HeroProfileComponent } from './hero-profile.component';
import { AdItem }               from './ad-item';

@Injectable()
export class AdService {
  getAds() {
    return [
      new AdItem(HeroProfileComponent, {name: 'Bombasto', bio: 'Brave as they come'}),

      new AdItem(HeroProfileComponent, {name: 'Dr IQ', bio: 'Smart as they come'}),

      new AdItem(HeroJobAdComponent,   {headline: 'Hiring for several positions',
                                        body: 'Submit your resume today!'}),

      new AdItem(HeroJobAdComponent,   {headline: 'Openings in all departments',
                                        body: 'Apply today'}),
    ];
  }
}


/*
Copyright Google LLC. All Rights Reserved.
Use of this source code is governed by an MIT-style license that
can be found in the LICENSE file at http://angular.io/license
*/



