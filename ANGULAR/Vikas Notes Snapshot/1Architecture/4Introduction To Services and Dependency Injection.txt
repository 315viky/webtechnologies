<context: [ service def + dependencies + @injectable + dependency injection + injector + provider + metadata for provider in injector ,ngmodule, ngcomponent]
Introduction to services and dependency injection
_________________________________________________

- Service is a broad category encompassing any value, function or feature that an app needs.
- A service is typically a class with a narrow, well defined purpose. 
- Angular distinguishes components from services to increase modularity and reusability
- Ideally a components job is to enable the user experience and nothing more. A component should present
  properties and methods for data binding, in order to mediate between view( rendered by the template) and
  the application logic(  which often includes some notion of a model ).
- Component can delegate certain tasks to services, such as fetching the data from the server, validating user
  input or logging directly to console.
- By defining such processing tasks in an injectable service class, you make those tasks available to any 
  component
- ANgular helps you factor application logic into services and make those services available to components through
  'dependency injection'


Service Examples
________________
- Example of a service class that logs to the browser console
-------------------------------------------------------------
src/app/logger.service.ts(class)

export class Logger {
     log( msg: any ) { console.log( msg ); }
     error( msg: any ) { console.error( msg ); }
     warn(msg: any) { console.warn( msg); }
}

- Services can depend on other services.
Example HeroService depends on the Logger service and also uses BackendService to get heroes. That service in
turn might depend on the HttpClient service to fetch heroes asynchronously from a server

src/app/hero.service.ts( class )

 export class HeroService {
    private heroes: Hero[] = [];

    constructor(
      private backend: BackendService,
      private logger: Logger ) {}

    getHeroes() {
          this.backend.getAll(Hero).then( (heroes: Hero[]) => {
              this.logger.log('Fetched ${heroes.length} heroes.');
              this.heroes.push(...heroes); //fill cache
            });

          return this.heroes;
         }
   }
---------------------------------------------------------------------------------------------

Dependency Injection ( DI )
___________________________

- DI is wired into the Angular framework and used anywhere to provide new components with the services or other
  things they need.
- Component consume services, giving the component access to that service class
- To define a class as a service in angular, use the @Injectable() decorator to provide the metadata that allows
  Angular to inject it into a component as a dependency
- Similarly us @Injectable() decorator to indicate that a component or other class such as another service , a pipe
  or an ngModule has dependency


- The injector is the main mechanism. Angular creates an application wide injector for you during the bootstrap
  process, and additional injectors as needed. you dont have to create injectors
- An injector creates dependencies and maintains a container of dependency instances that it reuses if possible.
- A provider is an object that tells an injector how to obtain or create a dependency

- For any dependency that you need in your app, you must register a provider with the app's injector, so that
  the injector can use the provider to create new instances.
- For services, the provider is typically a service class itself
- A dependency doesnt have to be a service - it could be a function, for example, or a value


- When Angular creates a new instances of a component class, it determines which services or other dependencies
  it needs by looking at the constructor parameter types

For Example the contructor of HeroListComponent needs HeroService
---------------------------------------------------------------
src/app/hero-list.component.ts( constructor)

  constructor( private service: HeroService ) { }
---------------------------------------------------------------

- When angular discovers that a component depends on a service, it first checks if the injector has any existing
  instances of that service. 
- If a requested service instance doesnt exist yet, the injector makes one using the registered provider and
  adds it to the injector before returning the service to angular
- WHen all requested services have been resolved and returned , Angular can call the components constructor with
  those services as arguements


Providing Services
__________________

- You must register at least one provider of any service that you are going to use.
- THe provider can be part of the service's own metadata, making that service available everywhere, or you
   can register providers with specific modules or components.

- Register 'providers' in the metadata of the service in the @injectable() decorator or in @NgModule() or
  @Component() metadata

-------------------------------------------------------------------------------------------------------
- By default the Angular CLI command ng generate service registers providers with the root injector for your
  service by including provider metadata in the @Injectable() decorator.

@Injectable({
  providedIn: 'root',
})

- When you provide the service at the root level, angular creates a single, shared instance of the service and
  injects it into any class that asks for it.
- Registering the provider in the @Injectable() metadata also allows Angular to optimize an app by removing the
  service from the compiled app if it isnt used.


- To register provider with specific NgModule, the same instance of a service is avalable to all components in that
   NgModule. This is done using the @NgModule() decorator

    @NgModule({
     providers:[
        BackendService,
        Logger
    ],
    ...
   })

- To register provider at the component level, you get new instance of the service with each new instance of the
  component. Register provider with specific component metadata

    @Component({
       selector: 'app-hero-list',
       templateUrl: './hero-list.component.html',
       providers: [ HeroService ]
})
