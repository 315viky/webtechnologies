Architecture Overview
_____________________
-platform and framework building client apps in Html and TypeScript
- written in TS ( superset of JS, compiled into JS, addition static type checking support)
- core and optional functionality provided as TS library - imported into apps

Basic Building blocks
- NgModules - provides compilation context for components
- NgModules collect related code into functional sets
- Angular app is defined by a set of NgModules
- basic root module for bootstrapping and many more feature modules


Component
- Component define views which are sets of screen elements that angular can choose among and
  modify according program logic and data
- uses services for specfic functionality, not related to views -  can be injected as dependencies
  making code  modular, reusable and efficient
- Both component and services are just classes with decorators( metadata and type) - 
  to tell angular how to use them

Metadata
- metadata for a component class associates it with a template that defines a view.
	- template combines html+angular directives+binding markup - 
 	  allows to modify the html before rendering for display
- metadtata for a service class provides info angular needs to make service available to component through
          dependency injection

Router service
An app's components typically define many views, arranged hierarchially. 
- Angular provides router service to help you define navigation path among views
- Router provides sophisticated in browsers navigation capabilities
______________________________________________________________________________________________________________
Brief Introuction of building blocks - Modules, Components, Services

Modules
_______
- Ng Modules differ from JS modules
- declares a compilation context for a set of components related to app domain, workflow or closely related capabilitiesies
- ngmodule can associate components to services or other related code to form functional units
- every angular app has a root module - appModule - defines bootstrap functionality that launches app
- app contains many functional modules
- ngModules can be imported and exported and used by other ngModules.
   ex import router NgModule in your app to use router service

Organizing code into functional modules help manage complex apps,  design reusability also provides advantage 
of lazy loading - loading modules on demand - minimizes amount of code made available during start up

Components
__________
- Every angular app has atleast one component, the root component, that connects a component hierarchy
  with the page's document object model - dom
- Each component defines a class that contains application data and logic and is associated with an HTML
  template that defines a view to be displayed in a target env.

@component() - decorator identifies the class immediately as a component and provides template and related
               component specific metadata


Templates, directives, and data	binding
_______________________________________
- A template combines HTMl + Angular Markup that can modify HTML elements before they are
  displayed. 
- <Template directives> provide program logic and <binding markup> connects app data and DOM
- Two types of data binding
  - Event binding-> lets your app respond to user input in the target env by updating app data
  - Property binding-> lets you interpolate values that are computed from your app data into HTML

- Before view is displayed angular evaluates the directives and binding syntax in the template to modify
  HTML elements and DOM according to program data and logic
- Angular supports two-way binding - changes in DOM - such as user choices are also reflected in yur program 
- ANgular provides with pipes - to enrich user experience by transforming values for display
   - examples rates, ccy that are appropriate for  a user's locale

Services and dependency injection
_________________________________
- For data and logic not associated with a specific view and want to share accross components, create service class
- service class def is preceded by @injectable() decorator
- @injectable decorator provides metadata that allows service to be injected into client components as a 
  dependency

- Dependency Injection( DI) lets you keep your components lean and efficient
- components delegate logic to fetch data from server, validate user input,  logging to services

Routing
________

- Angular Router NgModule provides a service that lets you define a navigation path among different application
  states and view hierarchies. 
- It is modeled on the familiar browser navigation conventions
- Router maps  URL-LIKE paths to views instead of pages
- WHen a user performs an action such as clicking a link, that would load a new page in the browser, the
  router intercepts the browser's behaviour, and shows or hides view hierarchies
- If the router determines the current app state requires a particular functionality and the module that
  defines it hasnt been loaded, the router can lazy load on demand
- Router interprets a link URL according to your apps [view navigation rules defined in router service] and
  data state.
- Router also logs activity inthe browsers history, so the back and forward buttons work as well
- Navigation Rules - associate navigation paths with components.
- Path uses url like syntax that integrates your program data smae way as template syntax integrated view with
   program data

- Program logic can then be used to hide or show views based on user inputs

Summary
_______
Together, a component and template define an Angular view.

A decorator on a component class adds the metadata, including a pointer to the associated template.
Directives and binding markup in a component's template modify views based on program data and logic.
The dependency injector provides services to a component, such as the router service that lets you define navigation among views.

	







