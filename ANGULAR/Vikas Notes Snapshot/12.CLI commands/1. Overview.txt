CLI overview and command Reference
____________________________________

CLI tool that you use to initialize, develop, scaffold and maintain angular
applications

Installing Angular CLI
______________________

npm install -g @angular/cli

Basic workflow
________________
ng help
--------
  add Adds support for an external library to your project.
  analytics Configures the gathering of Angular CLI usage metrics. See https://v8.angular.io/cli/usage-analytics-gathering.
  build (b) Compiles an Angular app into an output directory named dist/ at the given output path. Must be executed from within a workspace directory.
  deploy (d) Invokes the deploy builder for a specified project or for the default project in the workspace.
  config Retrieves or sets Angular configuration values in the angular.json file for the workspace.
  doc (d) Opens the official Angular documentation (angular.io) in a browser, and searches for a given keyword.
  e2e (e) Builds and serves an Angular app, then runs end-to-end tests using Protractor.
  generate (g) Generates and/or modifies files based on a schematic.
  help Lists available commands and their short descriptions.
  lint (l) Runs linting tools on Angular app code in a given project folder.
  new (n) Creates a new workspace and an initial Angular app.
  run Runs an Architect target with an optional custom builder configuration defined in your project.
  serve (s) Builds and serves your app, rebuilding on file changes.
  test (t) Runs unit tests in a project.
  update Updates your application and its dependencies. See https://update.angular.io/
  version (v) Outputs Angular CLI version.
  xi18n Extracts i18n messages from source code.


ng generate --help
--------------------
Generates and/or modifies files based on a schematic.
usage: ng generate <schematic> [options]

arguments:
  schematic
    The schematic or collection:schematic to generate.

options:
  --defaults
    When true, disables interactive input prompts for options with a default.
  --dry-run (-d)
    When true, runs through and reports activity without writing out results.
  --force (-f)
    When true, forces overwriting of existing files.
  --help
    Shows a help message for this command in the console.
  --interactive
    When false, disables interactive input prompts.

Available Schematics:
  Collection "@schematics/angular" (default):
    appShell
    application
    class
    component
    directive
    enum
    guard
    interface
    library
    module
    pipe
    service
    serviceWorker
    universal
    webWorker

To create, build, and serve a new basic Angular project on a development server
go to the parent directory of your new workspace use the following command

ng new my-first-project
cd my-first-project
ng serve


Directory of C:\Users\vinoo\MyAngularApps\my-first-project

09/15/2019  09:18 AM    <DIR>          .
09/15/2019  09:18 AM    <DIR>          ..
09/15/2019  09:17 AM               246 .editorconfig
09/15/2019  09:17 AM               631 .gitignore
09/15/2019  09:17 AM             3,673 angular.json
09/15/2019  09:17 AM               429 browserslist
09/15/2019  09:17 AM    <DIR>          e2e
09/15/2019  09:17 AM             1,028 karma.conf.js
09/15/2019  09:18 AM    <DIR>          node_modules
09/15/2019  09:18 AM           471,120 package-lock.json
09/15/2019  09:17 AM             1,290 package.json
09/15/2019  09:17 AM             1,031 README.md
09/15/2019  09:17 AM    <DIR>          src
09/15/2019  09:17 AM               270 tsconfig.app.json
09/15/2019  09:17 AM               543 tsconfig.json
09/15/2019  09:17 AM               270 tsconfig.spec.json
09/15/2019  09:17 AM             1,988 tslint.json

Angular Workspace
-----------------
ng new - creates angular workspace, generates a new app skeleton as above

Workspace Configuration files
_____________________________
All projects within a workspace share a CLI configuration context. 
The top level of the workspace contains workspace-wide configuration files,
 configuration files for the root-level application, and subfolders for the
 root-level application source and test files.

.editorconfig - Configuration for code editors. Used by EditorPluggins
.gitignore  - Specifies intentionally untracked files that Git should ignore.
README.md - Introductory documentation for the root app
angular.json - CLI configuration defaults for all projects in the workspace, 
               including options for build, serve and test tools that the CLI
               uses, such as TSLint, Karma and Protractor
package.json - Configures "npm package dependencies" that are available to all
               projects in the workspace.

package-lock.json - Provides version information for all packages installed
                    into node_modules by the npm client
src/  - source files for the root-level application project
node_modules/   - Provides npm packages to the entire workspace. Workspace-wide
                  node_modules dependencies are visibile to all projects
tsconfig.json  - Default TypeScript configuation for projects in workspace
tslint.json - Default tslint config for projects in workspace

"TSLint is an extensible static analysis tool that checks TypeScript code 
for readability, maintainability, and functionality errors. 
It is widely supported across modern editors & build systems and can be 
customized with your own lint rules, configurations, and formatters."


Application source files
________________________

app/ - Contains the component files in which your application logic and data
       are defined.
assets/ - Contains image and other asset files to be copied as-is when you
          build your application
environments/ - Contains build configuration options for particular target
                environments. 
favicon.ico  -  An icon to use for this application in the bookmark bar
index.html - The main HTML page that is served when someone visits your site
             The CLI automatically adds all Javascript and CSS files when 
              building your app, so you typically dont need to add any <script>
              or <link> tags here manually
main.ts - The main entry point for your application. Compiles the application
          with the JIT compiler and bootstraps the applications root module
          (AppModule) to run in the browser. You can also use the AOT compiler
          without changing any code by appending the --aot flag to the CLI build
          and serve commands
polyfills.ts - provides polyfill scripts for browser support
styles.sass - Lists CSS files that supply styles for a project. The extension
              reflects the style preprocessor you have configured for the 
              project
test.ts - The main entry point for your unit tests, with some Angular-specific configuration.
          You don't typically need to edit this file.




Inside the src/ folder, the app/ folder contains your project's logic and data.
Angular components, templates, and styles go here.

SRC/APP/ FILES	PURPOSE
app/app.component.ts	Defines the logic for the app's root component,
                        named AppComponent. The view associated with this root
                        component becomes the root of the view hierarchy as 
                        you add components and services to your application.
app/app.component.html	Defines the HTML template associated with the root 
                        AppComponent.
app/app.component.css	Defines the base CSS stylesheet for the root 
                        AppComponent.
app/app.component.spec.ts	Defines a unit test for the root AppComponent.
app/app.module.ts	Defines the root module, named AppModule, that tells
                        Angular how to assemble the application. Initially 
                        declares only the AppComponent. As you add more 
                        components to the app, they must be declared here.


Application Configuration files
-------------------------------
The application-specific configuration files for the root application reside 
at the workspace root level

For a multi-project workspace, project-specific configuration files are 
in the project root, under projects/project-name/.

Project-specific TypeScript configuration files inherit from the 
workspace-wide tsconfig.json, and project-specific TSLint configuration 
files inherit from the workspace-wide tslint.json.

browserslist -	Configures sharing of target browsers and Node.js versions 
                 among various front-end tools. 
                 See Browserslist on GitHub for more information.
karma.conf.js - Application specific karma configuration
tsconfig.app.json -Application-specific TypeScript configuration, 
                   including TypeScript and Angular template compiler options.
                   See TypeScript Configuration.
tslint.json	Application-specific TSLint configuration.



End-to-end test files
----------------------
An e2e/ folder at the top level contains source files for a set of end-to-end
 tests that correspond to the root-level application, along with 
test-specific configuration files.

For a multi-project workspace, application-specific end-to-end tests are in 
the project root, under projects/project-name/e2e/.

content_copy
e2e/
   src/                 (end-to-end tests for my-app)
      app.e2e-spec.ts
      app.po.ts
    protractor.conf.js  (test-tool config)
    tsconfig.json       (TypeScript config inherits from workspace)



Multiple projects
_________________

ng new my-workspace --createApplication="false"
cd my-workspace
ng generate application my-first-app

Multiple project file structure
The first explicitly generated application goes into the projects/ folder along with all other projects in the workspace. Newly generated libraries are also added under projects/. When you create projects this way, the file structure of the workspace is entirely consistent with the structure of the workspace configuration file, angular.json.

content_copy
my-workspace/
  ...             (workspace-wide config files)
  projects/       (generated applications and libraries)
    my-first-app/ --(an explicitly generated application)
      ...         --(application-specific config)
      e2e/        ----(corresponding e2e tests)
         src/     ----(e2e tests source)
         ...      ----(e2e-specific config)
      src/        --(source and support files for application)
    my-lib/       --(a generated library)
      ...         --(library-specific config)
      src/        --source and support files for library) 	


Library project files
When you generate a library using the CLI (with a command such as 
ng generate library my-lib), 
the generated files go into the projects/ folder of the workspace. 
For more information about creating your own libraries, see Creating Libraries.

Libraries (unlike applications and their associated e2e projects) have their own package.json configuration files.

Under the projects/ folder, the my-lib folder contains your library code.

LIBRARY SOURCE FILES	PURPOSE
src/lib	Contains your library project's logic and data. Like an application project, a library project can contain components, services, modules, directives, and pipes.
src/test.ts	The main entry point for your unit tests, with some library-specific configuration. You don't typically need to edit this file.
src/public-api.ts	Specifies all files that are exported from your library.
karma.conf.js	Library-specific Karma configuration.
ng-package.json	Configuration file used by ng-packagr for building your library.
package.json	Configures npm package dependencies that are required for this library.
tsconfig.lib.json	Library-specific TypeScript configuration, including TypeScript and Angular template compiler options. See TypeScript Configuration.
tsconfig.spec.json	TypeScript configuration for the library tests. See TypeScript Configuration.
tslint.json	Library-specific TSLint configuration.


CLI Command-Language syntax

ng commandNameOrAlias requiredArg[optionalArg] [options]



















































